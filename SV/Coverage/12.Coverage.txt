class MuxCoverage;
  bit sel;      // Selector signal
  bit in0;      // Input 0
  bit in1;      // Input 1
  bit out;      // Output signal

  // covergroup
  covergroup mux_cg @(sel or in0 or in1);
    // Coverpoints for individual signals
    cp_sel : coverpoint sel {
      bins sel_bins[] = {0, 1}; // Cover all states of sel
    }
    cp_in0 : coverpoint in0 {
      bins in0_bins[] = {0, 1}; // Cover all states of in0
    }
    cp_in1 : coverpoint in1 {
      bins in1_bins[] = {0, 1}; // Cover all states of in1
    }
    cp_out : coverpoint out {
      bins out_bins[] = {0, 1}; // Cover all states of out
    }

    // Cross coverage between coverpoints
    cross_cp_sel_in0 : cross cp_sel, cp_in0;
    cross_cp_sel_in1 : cross cp_sel, cp_in1;
    cross_cp_sel_out : cross cp_sel, cp_out;

    // Cross coverage between signals
    cross_signals_in0_in1 : cross cp_in0, cp_in1;
    cross_signals_in0_out : cross cp_in0, cp_out;
    cross_signals_in1_out : cross cp_in1, cp_out;
  endgroup

  // Constructor
  function new();
    mux_cg = new(); 
  endfunction
    // Task to sample values
  task sample(input bit s, input bit i0, input bit i1, input bit o);
    sel = s;
    in0 = i0;
    in1 = i1;
    out = o;
    mux_cg.sample();
  endtask
  // Task to print coverage
  task print_coverage();
    $display("Total Coverage: %0.2f%%", mux_cg.get_coverage());
    $display("cp_sel: %0.2f%%", mux_cg.cp_sel.get_coverage());
    $display("cp_in0: %0.2f%%", mux_cg.cp_in0.get_coverage());
    $display("cp_in1: %0.2f%%", mux_cg.cp_in1.get_coverage());
    $display("cp_out: %0.2f%%", mux_cg.cp_out.get_coverage());
  endtask
endclass

module mux_testbench;
  // Declare MuxCoverage class instance
  MuxCoverage cov;

  // 2:1 MUX functionality
  function bit mux(bit sel, bit in0, bit in1);
    return (sel ? in1 : in0);
  endfunction

  initial begin
    // Create an instance of the coverage class
    cov = new();
        // Test cases for the 2:1 MUX
    cov.sample(0, 0, 0, mux(0, 0, 0));
    cov.sample(0, 0, 1, mux(0, 0, 1));
    cov.sample(0, 1, 0, mux(0, 1, 0));
    cov.sample(0, 1, 1, mux(0, 1, 1));
    cov.sample(1, 0, 0, mux(1, 0, 0));
    cov.sample(1, 1, 0, mux(1, 1, 0));
    cov.sample(1, 0, 1, mux(1, 0, 1));
    cov.sample(1, 1, 1, mux(1, 1, 1));
    // Print total coverage
    cov.print_coverage();
    $finish;
  end
endmodule
