module covergroup_experiment;
    // Signal declarations
    bit [9:0] data;
  bit clk;
    // Function to calculate the range of the data signal
    function automatic bit [1:0] get_range(bit [9:0] data);
        if (data <= 10) return 0;
        else if (data <= 100) return 1;
        else if (data <= 1000) return 2;
        else return 3;
    endfunction

    // Covergroup definition
    covergroup my_cg @(posedge clk);
        option.name = "Data_Coverage";
        option.per_instance = 1;
        option.weight = 2;
        option.goal = 100;
        option.at_least = 1;
        option.auto_bin_max = 500;

        // Coverpoint for the data signal
        cp_data: coverpoint data {
          bins data_bin1[] = {[0:4],[4:10],[10:15]};
                  }

        // Coverpoint for the range of the data signal
        cp_range: coverpoint get_range(data) {
            bins range_bin[] = {[0:3]};
        }
    endgroup

    // Instantiate the covergroup
    my_cg cg_inst = new();

    // Clock signal  
    initial clk = 0;
    always #25 clk = ~clk;

    // Testbench
    initial begin
        // Randomize and sample coverage
      repeat (400) begin
          for(int i=0;i<10;i++) begin
            data = $urandom % 1024;
            @(posedge clk);
          end
        cg_inst.sample();
             $display("[%0t] data = %0d", $time, data);
        end

        // Print coverage metrics
        $display("Overall Coverage = %0f%%", cg_inst.get_coverage());
        $display("Data Coverage = %0f%%", cg_inst.cp_data.get_coverage());
        $display("Range Coverage = %0f%%", cg_inst.cp_range.get_coverage());

    #100;    $finish;
    end
endmodule
